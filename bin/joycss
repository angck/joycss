#!/usr/bin/env node

var argv   = process.argv.slice(1);
var path   = require('path');
var fs     = require('fs');
var argu   = [];
var util   = require('util');
var exists = fs.existsSync || path.existsSync;
var contineRun = true;

var commendList = [
  'config', 'update', 'nochange', 'important', 'source',
  'white', 'alpha', 'close', 'vertical', 'version', 'help'
];
argv.forEach(function(arg){
  if (arg[0] === '-' && arg.length > 2 && arg[1] !== '-'){

    for (var i = 1; i < arg.length; i++) {
      argu.push('-' + arg[i]);
    }
  } else {
    argu.push(arg);
  }
});

var config = {
  file: '',
  layout: 'auto'
};

var args = argu.filter(function(arg){
  var match = arg.match(/^--?([a-z][0-9a-z-]*)(?:=([^\s]+))?$/i);
  if (match) { 
    arg = match[1];
  } else { 
    return arg;
  }

  switch (arg) {
    case 'h':
    case 'help': {
      showHelp();
      contineRun = false;
    }

    case 'y':
    case 'vertical': {
      console.log('use layout vertical');
      config.layout = 'vertical';
      break;
    }

    case 'x':
    case 'horizontal': {
      config.layout = 'horizontal';
      break;
    }

    //全部使用紧凑拼图
    case 'c':
    case 'close': {
      console.log('use layout close');
      config.layout = 'close';
      break;
    }

    //使用png24
    case 'a':
    case 'alpha': {
      console.log('use alpha mode, sprite image will be truecolor image, eg:png24');
      config.force8bit = false;
      break;
    }

    //背景白色
    case 'w':
    case 'white': {
      console.log('use white background for sprite image, no transpant');
      config.background = 'ffffff00';
      break;
    }

    //重写文件名,使用source文件
    case 's':
    case 'source': {
      console.log('rewrite css file, use .source.css file as input');
      config.writeFile = true;
      break;
    }

    //图片上传
    case 'u':
    case 'upload': {
      console.log('upload image file an sprite finish');
      config.uploadImgs = true;
      break;
    }

    //重写文件名,使用source文件
    case 'i':
    case 'important': {
      console.log('add important for sprite rule, improve background-image level');
      config.useImportant = tue;
      break;
    }

    case 'n':
    case 'nochange':{
      console.log('nochange for sprite image, use the backup url');
      config.nochange = true;
      break;
    }

    case 'v':
    case 'version': {
      var version = fs.readFileSync(path.resolve(__dirname, '../package.json'));
      version = JSON.parse(version).version;
      console.log("v" + version);
      process.exit(0);
    }

    case 'config': {
      var json = 'config.json';
      var file = path.resolve(__dirname, '../' + json);
      var cfg = fs.readFileSync(file);
      setCookie(JSON.parse(cfg), path.resolve(__dirname, '../../' + json));
      contineRun = false;
    }
  }
});

function showHelp(){
  var help = fs.readFileSync(__dirname + '/help.txt');
  var version = fs.readFileSync(path.resolve(__dirname, '../package.json'));
  version = JSON.parse(version).version;
  console.log(help.toString().replace('{version}', version).
    replace('{filename}', __filename));
  process.exit(0);

}

function setCookie(config, file){
  var readline = require('readline');
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  rl.question("Please config you use name in taobao.com: ", function(answer) {
    config.upload.headers.Cookie = '_nk_:' + answer + ';';
    var text = JSON.stringify(config.upload);
    fs.writeFile(file, text, function(err){
      if (err) {
        console.log('write config false');
        console.log(err);
      } else {
        console.log('write config success');
        console.log(text);
      }
      process.exit(0);
    });

    rl.close();
  });

}

function run(){
  config.file = args[1];
  var currentDir = process.cwd();
  if (!exists(config.file)) {
    config.file = autoFindFile(currentDir);
    config.nochange = true;
  }

  if (!config.file){
    showHelp();
  } else {
    config.file = path.resolve(process.cwd(), config.file);
    var parser = require('../src/');
    debugger;
    new parser(config.file, config);
  }

}

function autoFindFile(dir){
  var files = fs.readdirSync(dir);
  var ret = false;
  files.some(function(file){
    var basename = path.basename(file, '.css');
    if (path.extname(file) === '.css' && 
      files.indexOf(basename + '.json') !== -1) {
      ret = file;
      return true;
    }
  });

  return ret;
}

if (contineRun) run();
/**
 * vim: ft=javascript:tw=80:
 */
