#!/usr/bin/env node

var argv   = process.argv.slice(2);
var path   = require('path');
var fs     = require('fs');
var argu   = {global: []};
var utils  = require('../lib/utils');
var exists = fs.existsSync || path.existsSync;
var contineRun = true;
var config = {
  file: '',
  global: {}
};

function init (){
  argv.forEach(function(arg){
    if (arg[0] === '-'){

      if (arg.length > 2){
        var arg1 = arg[1];
        if (arg1 !== '-'){

          //-us
          if (+arg1 != +arg1) {
            for (var i = 1; i < arg.length; i++) argu.global.push(arg[i]);
          } else {
            //-0a -1c
            argu[arg1] = [];
            for (var i = 2; i < arg.length; i++) argu[arg1].push(arg[i]);
          }

        } else {
          argu.global.push(arg.slice(2));
        }
      } else {
        //--alpha
        argu.global.push(arg[1]);
      }

    } else {
      //filename
      config.file = arg;
    }
  });

  utils.forEach(argu, function(args, key){
    args.forEach(function(arg){
      matchArg(arg, key);
    });
  });

}

function matchArg(arg, key){
  key = key || 'global';
  if (!config[key]) config[key] = {};
  var msg = '';
  switch (arg) {
    case 'h':
    case 'help': {
      showHelp();
      contineRun = false;
    }

    case 'y':
    case 'vertical': {
      msg = ('use layout vertical');
      config[key].layout = 'vertical';
      break;
    }

    case 'x':
    case 'horizontal': {
      config[key].layout = 'horizontal';
      break;
    }

    //全部使用紧凑拼图
    case 'c':
    case 'close': {
      msg = ('use layout close');
      config[key].layout = 'close';
      break;
    }

    //使用png24
    case 'a':
    case 'alpha': {
      msg = ('use alpha mode, sprite image will be truecolor image, eg:png24');
      config[key].force8bit = false;
      break;
    }

    //重写文件名,使用source文件
    case 's':
    case 'source': {
      msg = ('rewrite css file, use .source.css file as input');
      config[key].writeFile = true;
      break;
    }

    //图片上传
    case 'u':
    case 'upload': {
      msg = ('upload image file an sprite finish');
      config[key].uploadImgs = true;
      break;
    }

    //重写文件名,使用source文件
    case 'i':
    case 'important': {
      msg = ('add important for sprite rule, improve background-image level');
      config[key].useImportant = true;
      break;
    }

    case 'n':
    case 'nochange':{
      msg = ('nochange for sprite image, use the backup url');
      config[key].nochange = true;
      break;
    }

    case 'v':
    case 'version': {
      var version = fs.readFileSync(path.resolve(__dirname, '../package.json'));
      version = JSON.parse(version).version;
      console.log("version " + version);
      process.exit(0);
      break;
    }

    case 'config': {
      var json = 'config.json';
      var file = path.resolve(__dirname, '../' + json);
      var cfg = fs.readFileSync(file);
      setCookie(JSON.parse(cfg), path.resolve(__dirname, '../../' + json));
      contineRun = false;
      break;
    }

    default: {
      console.log('[error]unknow option ' + arg);
      showHelp();
    }
  }

  if (msg) console.log('[config ' + key + ']' + msg);
}

function showHelp(){
  var help = fs.readFileSync(__dirname + '/help.txt');
  var version = fs.readFileSync(path.resolve(__dirname, '../package.json'));
  version = JSON.parse(version).version;
  console.log(help.toString().replace('{version}', version).
    replace('{filename}', __filename));
  process.exit(0);

}

function setCookie(config, file){
  var readline = require('readline');
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  rl.question("Please config you use name in taobao.com: ", function(answer) {
    config.headers.Cookie = '_nk_=' + answer + ';';
    var text = JSON.stringify(config);
    fs.writeFile(file, text, function(err){
      if (err) {
        console.log('write config false');
        console.log(err);
      } else {
        console.log('write config success');
        console.log(text);
      }
      process.exit(0);
    });

    rl.close();
  });

}

function run(){
  var currentDir = process.cwd();
  if (!config.file || !exists(config.file)) {
    config.file = autoFindFile(currentDir);
    config.global.nochange = true;
  }

  if (!config.file){
    showHelp();
  } else {
    config.file = path.resolve(process.cwd(), config.file);
    var parser = require('../src/');
    debugger;
    new parser(config.file, config);
  }

}

function autoFindFile(dir){
  var files = fs.readdirSync(dir);
  var ret = false;
  files.some(function(file){
    var basename = path.basename(file, '.css');
    if (path.extname(file) === '.css' && 
      files.indexOf(basename + '.json') !== -1) {
      ret = file;
      return true;
    }
  });

  return ret;
}

init();
if (contineRun) run();
/**
 * vim: ft=javascript:tw=80:
 */
